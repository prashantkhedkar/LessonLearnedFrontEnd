import React, { useState, useEffect } from "react";
import { ServiceFieldOption } from "../../../../modules/components/dynamicFields/utils/types";
import {
  BtnLabelCanceltxtMedium2,
  BtnLabeltxtMedium2,
  DetailLabels,
  InfoLabels,
} from "../../../../modules/components/common/formsLabels/detailLabels";
import { OptionFormData } from "./OptionsManager.types";
import { useIntl } from "react-intl";
import { OverlayTrigger, Tooltip } from "react-bootstrap";
import NoRecordsAvailable from "../../../../modules/components/noRecordsAvailable/NoRecordsAvailable";

interface OptionsManagerProps {
  initialOptions?: ServiceFieldOption[];
  onOptionsChange: (options: ServiceFieldOption[]) => void;
  fieldType: "dropdown" | "radiogroup";
  minLength?: number;
  maxLength?: number;
  isEditMode?: boolean;
}

export const OptionsManager: React.FC<OptionsManagerProps> = ({
  initialOptions = [],
  onOptionsChange,
  fieldType,
  minLength = 1,
  maxLength = 50,
  isEditMode = false,
}) => {
  const [options, setOptions] = useState<ServiceFieldOption[]>(initialOptions);
  const [currentOption, setCurrentOption] = useState<OptionFormData>({
    label: "",
    isDefault: false,
  });
  const [editingIndex, setEditingIndex] = useState<number | null>(null);

  const [validationError, setValidationError] = useState<string | null>(null);
  const intl = useIntl();

  useEffect(() => {
    onOptionsChange(options);
  }, [options, onOptionsChange]);

  const validateLabel = (label: string): boolean => {
    const trimmed = label.trim();
    if (!trimmed) {
      setValidationError(
        intl.formatMessage({ id: "VALIDATION.ADD.NEW.FIELD.LABEL" })
      );
      return false;
    }
    if (trimmed.length < minLength) {
      setValidationError(
        `${intl.formatMessage({ id: "VALIDATION.MINCHARLIMIT" })} ${minLength}`
      );
      return false;
    }
    if (trimmed.length > maxLength) {
      setValidationError(
        `${intl.formatMessage({ id: "VALIDATION.MAXCHARLIMIT" })} ${maxLength}`
      );
      return false;
    }
    // Check if label already exists (improved logic for edit mode)
    const existingLabelIndex = options.findIndex(
      (opt) => opt.label.toLowerCase() === trimmed.toLowerCase()
    );

    if (existingLabelIndex !== -1) {
      // In edit mode, allow editing the same option but prevent duplicates
      if (editingIndex !== null && editingIndex === existingLabelIndex) {
        // User is editing the same option with the same label - this is allowed
        setValidationError(null);
        return true;
      } else if (editingIndex === null || editingIndex !== existingLabelIndex) {
        // Either adding new option or editing different option with existing label - not allowed
        setValidationError(
          intl.formatMessage({ id: "VALIDATION.ADD.NEW.FIELD.LABEL.DUPLICATE" })
        );
        return false;
      }
    }
    setValidationError(null);
    return true;
  };

  const handleAddOption = () => {
    if (!validateLabel(currentOption.label)) {
      return;
    }

    // Auto-generate numeric value
    const autoGeneratedValue = options.length + 1;

    const newOption: ServiceFieldOption = {
      label: currentOption.label.trim(),
      value: autoGeneratedValue,
      fieldId: autoGeneratedValue,
      isDefault: currentOption.isDefault,
    };

    let updatedOptions: ServiceFieldOption[];

    if (editingIndex !== null) {
      // Update existing option - keep the same value
      const existingOption = options[editingIndex];
      updatedOptions = options.map((opt, index) =>
        index === editingIndex
          ? {
            ...newOption,
            value: existingOption.value,
            fieldId: existingOption.fieldId,
          }
          : opt
      );
    } else {
      // Add new option
      updatedOptions = [...options, newOption];
    }

    // Handle default option logic
    if (currentOption.isDefault) {
      // If this is set as default, remove default from others
      updatedOptions = updatedOptions.map((opt) => ({
        ...opt,
        isDefault:
          opt.value ===
          (editingIndex !== null
            ? options[editingIndex].value
            : autoGeneratedValue),
      }));
    }

    setOptions(updatedOptions);
    resetForm();
  };

  const handleEditOption = (index: number) => {
    const option = options[index];
    setCurrentOption({
      label: option.label,
      isDefault: option.isDefault || false,
    });
    setEditingIndex(index);
    setValidationError(null);
  };

  const handleDeleteOption = (index: number) => {
  // Deletion is allowed regardless of edit mode
    const updatedOptions = options.filter((_, i) => i !== index);
    setOptions(updatedOptions);
  };

  const resetForm = () => {
    setCurrentOption({
      label: "",
      isDefault: false,
    });
    setEditingIndex(null);
    setValidationError(null);
  };

  const handleSetDefault = (index: number) => {
    const updatedOptions = options.map((opt, i) => ({
      ...opt,
      isDefault: i === index,
    }));
    setOptions(updatedOptions);
  };

  return (
    <div className="options-manager">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <InfoLabels
          text={
            fieldType === "dropdown"
              ? intl.formatMessage({ id: "ADD.NEW.FIELD.DROPDOWN.OPTION" })
              : intl.formatMessage({ id: "ADD.NEW.FIELD.RADIO.OPTION" })
          }
          isI18nKey={false}
          isRequired={true}
        />
        {/* {isEditMode && (
          <div className="alert alert-info alert-sm mb-0 ms-3" style={{ fontSize: '0.875rem' }}>
            <i className="fas fa-info-circle me-2"></i>
            {intl.formatMessage({ id: "EDIT.MODE.OPTIONS.INFO" }) || "Edit Mode: You can add new options but cannot delete existing ones."}
          </div>
        )} */}
      </div>

      {/* Options Form - Always Visible */}
      <div className="border rounded p-3 mb-3 bg-light">
        <div className="row">
          <div className="col-md-10">
            <DetailLabels text={intl.formatMessage({ id: "OPTION.LABEL" })} isI18nKey={true} />
            <input
              type="text"
              className={`form-control ${validationError ? "is-invalid" : ""}`}
              value={currentOption.label}
              minLength={minLength}
              maxLength={maxLength}
              onChange={(e) => {
                setCurrentOption({
                  ...currentOption,
                  label: e.target.value,
                });
                // Clear validation error when user starts typing
                if (validationError) {
                  setValidationError(null);
                }
              }}
              onBlur={() => {
                // Validate on blur
                if (currentOption.label.trim()) {
                  validateLabel(currentOption.label);
                }
              }}
              placeholder={intl.formatMessage({ id: "OPTION.LABEL.PLACEHOLDER" })}
            />
            {validationError && (
              <div className="invalid-feedback">{validationError}</div>
            )}
          </div>
          <div className="col-md-2">
            <DetailLabels text={intl.formatMessage({ id: "LABEL.DEFAULT" })} isI18nKey={true} />
            <div className="form-check form-switch mt-3 me-4">
              <input
                type="checkbox"
                className="form-check-input switch-sm"
                id="isDefault"
                maxLength={50}
                checked={currentOption.isDefault}
                onChange={(e) =>
                  setCurrentOption({
                    ...currentOption,
                    isDefault: e.target.checked,
                  })
                }
              />
            </div>
          </div>
        </div>
        <div className="row mt-3">
          <div className="col-1">
            <button
              type="button"
              className="btn MOD_btn btn-create"
              onClick={handleAddOption}
            >
              <BtnLabeltxtMedium2
                isI18nKey={true}
                text={
                  editingIndex !== null
                    ? "BUTTON.LABEL.UPDATE"
                    : "BUTTON.LABEL.ADD"
                }
              />
            </button>
          </div>
          <div className="col-1">
            <button
              type="button"
              className="btn MOD_btn btn-cancel"
              onClick={resetForm}
            >
              <BtnLabelCanceltxtMedium2
                isI18nKey={true}
                text="BUTTON.LABEL.CANCEL"
              />
            </button>
          </div>
        </div>
      </div>

      {/* Options List */}
      <div className="options-list">
        {options.length === 0 ? (
          <div className="text-center py-3">
            <NoRecordsAvailable/>
          </div>
        ) : (
          <>
            <div
              className="settings-unit-list-header card my-5 px-0"
              id="unitListHeader"
            >
              {/* Header */}
              {options && options.length > 0 && (
                <div className="mt-0  p-2  ">
                  <div className="d-flex justify-content-between px-4">
                    <div className="col-md-6">
                      <DetailLabels text={intl.formatMessage({ id: "ADD.NEW.FIELD.LABEL" })} isI18nKey={true} />
                    </div>
                    <div className="col-md-5">
                      <DetailLabels text={intl.formatMessage({ id: "ADD.NEW.FIELD.SETASDEFAULT" })} isI18nKey={true} />
                    </div>
                    <div className="col">
                      <DetailLabels text={intl.formatMessage({ id: "LABEL.ACTION" })} isI18nKey={true} />
                    </div>
                  </div>
                </div>
              )}
              {/* List Items */}
              {options &&
                options.map((option, index) => {
                  const isLast = index === options.length - 1;
                  return (
                    <div
                      className={`row d-flex justify-content-between px-5 py-2  ${isLast
                        ? "settings-user-item-last"
                        : "settings-user-item"
                        }`}
                      key={index}
                    >
                      <div className="col-md-6">
                        <span className="font-1">{option.label}</span>
                      </div>
                      <div className="col-md-5">
                        <OverlayTrigger
                          placement="top"
                          overlay={
                            <Tooltip id="tooltip">
                              <DetailLabels text={intl.formatMessage({ id: "ADD.NEW.FIELD.SETASDEFAULT" })} isI18nKey={true} />
                            </Tooltip>
                          }
                        >
                          <button
                            type="button"
                            className={`btn btn-sm ${option.isDefault
                              ? "action-active-bg"
                              : "action-default-bg"
                              }`}
                            onClick={() => handleSetDefault(index)}
                            title={intl.formatMessage({
                              id: "ADD.NEW.FIELD.SETASDEFAULT",
                            })}
                          >
                            {option.isDefault ? "✓" : "○"}
                          </button>
                        </OverlayTrigger>
                      </div>
                      <div className="col">
                        <OverlayTrigger
                          placement="top"
                          overlay={
                            <Tooltip id="tooltip">
                              <DetailLabels text={isEditMode
                                ? intl.formatMessage({ id: "TOOLTIP.DELETE.DISABLED.EDIT.MODE" })
                                : intl.formatMessage({ id: "LABEL.DELETE" })
                              } isI18nKey={true} />
                            </Tooltip>
                          }
                        >
                          <button
                            type="button"
                            className="btn-close"
                            aria-label="Close"
                            onClick={() => handleDeleteOption(index)}
                            disabled={isEditMode}
                            style={{
                              opacity: isEditMode ? 0.5 : 1,
                              cursor: isEditMode ? 'not-allowed' : 'pointer'
                            }}
                          ></button>
                        </OverlayTrigger>
                      </div>
                    </div>
                  );
                })}
            </div>
            {/* <div className="table-responsive">
              <table className="table table-sm table-hover">
                <thead className="table-light">
                  <tr>
                    <th>{intl.formatMessage({ id: "ADD.NEW.FIELD.LABEL" })}</th>
                    <th>
                      {intl.formatMessage({ id: "ADD.NEW.FIELD.DEFAULT" })}
                    </th>
                    <th>
                      {intl.formatMessage({ id: "ADD.NEW.FIELD.ACTION" })}
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {options.map((option, index) => (
                    <tr key={index}>
                      <td>{option.label}</td>
                      <td>
                        <button
                          type="button"
                          className={`btn btn-sm ${
                            option.isDefault
                              ? "btn-success"
                              : "btn-outline-secondary"
                          }`}
                          onClick={() => handleSetDefault(index)}
                          title={intl.formatMessage({
                            id: "ADD.NEW.FIELD.SETASDEFAULT",
                          })}
                        >
                          {option.isDefault ? "✓" : "○"}
                        </button>
                      </td>
                      <td>
                        <OverlayTrigger
                          placement="top"
                          overlay={
                            <Tooltip id="tooltip">
                              <div className="tooltip-text">
                                {intl.formatMessage({ id: "TOOLTIP.EDIT" })}
                              </div>
                            </Tooltip>
                          }
                        >
                          <div onClick={() => handleEditOption(index)}>
                            <i className="2xl fa fa-light fa-edit fa-xl" />
                          </div>
                        </OverlayTrigger>
                        <OverlayTrigger
                          placement="top"
                          overlay={
                            <Tooltip id="tooltip">
                              <div className="tooltip-text">
                                {intl.formatMessage({ id: "TOOLTIP.REMOVE" })}
                              </div>
                            </Tooltip>
                          }
                        >
                          <div onClick={() => handleDeleteOption(index)}>
                            <i className="2xl fa fa-light fa-remove fa-xl" />
                          </div>
                        </OverlayTrigger>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div> */}
          </>
        )}
      </div>
    </div>
  );
};
